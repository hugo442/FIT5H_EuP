1. 	rails g scaffold users name:string email:string password:digest
		digest = Verschlüsselt die Daten in der Datenbank

2. 	gem 'bcrypt', '~> 3.1.7'
		gem einfügen, es kümmert sich um die Cryptographie der Passwörter etc. Ist zu empfehlen

3. 	app/model/user.rb -> has_secure_password
		methode zum verschlüsseln des Passwords. Geht nur mit dem gem "bcrypt".

4. 	app/model/user.rb -> validates :name, presence: true
	app/model/user.rb -> validates :email, presence: true, format: { with: /(\S+)@(\S+)/ }, uniqueness: { case_sensitive: false }
		validates hinzufügen, wie gewünscht

rake routes
	zeigt die Routen für die Methoden zu den Controller

5. 	app/views/layouts/_top_bar.html.erb
	<div class="top-bar-right">
	    <ul class="menu">
	      <li><%= link_to 'Sign Up', signup_path %></li>
	    </ul>
	</div>
		Erstellen eines Links für das Erstellen eines Benutzers über einen eigenen URL Pfad

6.	config/routes.rb
	get 'signup' => 'users#new'
		Hinzufügen um den Pfad zu beeinflussen

7. 	rails g controller sessions
		Wichtig Plural verwenden. Wir erstellen ein SignIn über eine Session dazu benötigen wir einen neuen Controller

8.	config/routes.rb
	resource :session
		Hinzufügen des Pfades für den neuen Controller. Wir haben nur einen Login - Daher 'resource' im Singular. Wollen aber trotzdem den Controller im Plural haben für die Schönheit.

9.	app/views/layouts/_top_bar.html.erb
	<li><%= link_to 'Sign In', new_session_path %></li>
		Hinzufügen für den SignIn. Jetzt brauchen wir eine neue Action im controller.

10. app/controllers/sessions_controller.rb
	Zwei Methoden erstellen:
	def new

	end

	def create

	end
	
11.	app/views/sessions/new.html.erb
		erstellen der Datei

12. app/views/sessions/new.html.erb
	Selbst geschrieben:
	<h1>Sing IN</h1>
	<%= form_tag(session_path) do %>
		<fieldset>
			<div class="row">
				<div class = "medium-4 columns">
					<%= label_tag :email %>
				</div>
				<div class = "medium-8 columns">
					<%= email_field_tag :email, params[:email], autofocus: true %>
				</div>
			</div>

			<div class="row">
				<div class = "medium-4 columns">
					<%= label_tag :password %>
				</div>
				<div class = "medium-8 columns">
					<%= password_field_tag :password, nil %>
				</div>
			</div>

			<div class="row">
				<div class = "medium-4 columns">
					
				</div>
				<div class = "medium-8 columns">
					<%= submit_tag 'SignIn' %>
				</div>
			</div>
		</fieldset>
	<% end %>

13.	app/contollers/sessions_controller.rb
	Einfügen in die Create-Methode:
	user = User.find_by(email: params[:email])
		Suchen ob es die E-Mail in der Datenbank gibt
	def create
		user = User.find_by(email: params[:email])
		if user && user.authenticate(params[:password])
			session[:user_id] = user.id
			flash[:notice] = "Welcome back #{user.name}!"
			redirect_to root_path
		else
			flash.now[:alert] = "Falsche Zugangsdaten"
			render :new
		end
	end
		Abfrage, ob es die E-Mail in der Datenbank gibt und Willkommensnachricht für den User, wenn es passt und verweisung an die Rootseite. Wenn die Daten nicht passen wird eine Fehlermeldung gespeichert und die new.html.erb Seite aufgerufen mit der Fehlernachricht.

14.	app/controllers/sessions_controller.rb
	def destroy
		session[:user_id] = nil
		redirect_to root_path, notice: "Ausgeloggt. Bye, bye love."
	end
		Methode zum Ausloggen Konfigurieren

15.	app/views/layouts/_top_bar.html.erb
	<div class="top-bar-right">
	    <ul class="menu">
	    <% if current_user %>
	      <%= current_user.name %>
	      <%= link_to 'Logout', session_path, method: :delete %>
	    <% else %>
	      <li><%= link_to 'Sign Up', signup_path %></li>
	      <li><%= link_to 'Sign In', new_session_path %></li>
	    <% end %>
	    </ul>
 	</div>
 		Logout Button erstellen, wenn man schon eingelogt ist und einen SignIn Button erstellen, wenn man Noch nicht eingelogt ist.

16.	app/controllers/application_controller.rb
	def current_user
  		User.find(session[:user_id]) if session[:user_id]
	end

	helper_method :current_user
		Wir schreiben einen Universal-helper, der auch in den Controllern zur verfügung steht, daher ist er im applications_controller.rb vorhanden.
		Hier wird in den Users geguckt ob er vorhanden ist und das Objekt zur weiterverarbeitung in die top_bar weitergesendet.